generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")  // ← ここが MongoDB接続URL (例: mongodb+srv://...) を読み込む箇所
}

// ======================
//  User
// ======================
model User {
  // MongoDBなので ObjectId
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String   @unique
  image          String?
  hashedPassword String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  username String? @unique

  tweets       Tweet[]
  likes        Like[]
  replies      Reply[]
  following    Follow[]        @relation("FollowingRelation")
  followers    Follow[]        @relation("FollowerRelation")
  roomMessages DirectMessage[] @relation("UserMessages")
  retweets     Retweet[]       @relation("UserRetweets")
  quoteRetweets QuoteRetweet[] @relation("UserQuotes")
  notifications Notification[] @relation("UserNotifications")

  roomParticipants RoomParticipant[] @relation("UserRoomParticipants")
}

// ======================
//  Tweet
// ======================
model Tweet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  likes   Like[]
  replies Reply[]

  retweets      Retweet[]      @relation("TweetRetweets")
  quoteRetweets QuoteRetweet[] @relation("TweetQuotes")
}

// ======================
//  Like
// ======================
model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  tweetId String @db.ObjectId
  tweet   Tweet  @relation(fields: [tweetId], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

// ======================
//  Reply
// ======================
model Reply {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  tweetId String @db.ObjectId
  tweet   Tweet  @relation(fields: [tweetId], references: [id])

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
}

// ======================
//  Follow
// ======================
model Follow {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  followerId  String @db.ObjectId
  followingId String @db.ObjectId

  follower  User @relation("FollowerRelation", fields: [followerId], references: [id])
  following User @relation("FollowingRelation", fields: [followingId], references: [id])
}

// ======================
//  ChatRoom, DM
// ======================
model ChatRoom {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  participants RoomParticipant[] @relation("RoomParticipants")
  messages     DirectMessage[]
}

model RoomParticipant {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  roomId String @db.ObjectId
  userId String @db.ObjectId

  room ChatRoom @relation("RoomParticipants", fields: [roomId], references: [id])
  user User     @relation("UserRoomParticipants", fields: [userId], references: [id])
}

model DirectMessage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())

  roomId   String @db.ObjectId
  senderId String @db.ObjectId

  room   ChatRoom @relation(fields: [roomId], references: [id])
  sender User     @relation("UserMessages", fields: [senderId], references: [id])
}

// ======================
//  Retweet / QuoteRT
// ======================
model Retweet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  userId String @db.ObjectId
  user   User   @relation("UserRetweets", fields: [userId], references: [id])

  tweetId String @db.ObjectId
  tweet   Tweet  @relation("TweetRetweets", fields: [tweetId], references: [id])
}

model QuoteRetweet {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String?
  createdAt DateTime @default(now())

  originalId String? @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation("UserQuotes", fields: [userId], references: [id])

  tweetId String? @db.ObjectId
  tweet   Tweet?  @relation("TweetQuotes", fields: [tweetId], references: [id])
}

// ======================
//  Notification
// ======================
model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  type      String?
  entityId  String?
  createdAt DateTime @default(now())
  read      Boolean  @default(false)

  userId String @db.ObjectId
  user   User   @relation("UserNotifications", fields: [userId], references: [id])
}
